--- a/net/minecraft/client/resources/model/MultiPartBakedModel.java
+++ b/net/minecraft/client/resources/model/MultiPartBakedModel.java
@@ -20,7 +_,7 @@
 import org.apache.commons.lang3.tuple.Pair;
 
 @OnlyIn(Dist.CLIENT)
-public class MultiPartBakedModel implements BakedModel {
+public class MultiPartBakedModel implements net.neoforged.neoforge.client.model.IDynamicBakedModel {
     private final List<Pair<Predicate<BlockState>, BakedModel>> selectors;
     protected final boolean hasAmbientOcclusion;
     protected final boolean isGui3d;
@@ -29,23 +_,23 @@
     protected final ItemTransforms transforms;
     protected final ItemOverrides overrides;
     private final Map<BlockState, BitSet> selectorCache = new Reference2ObjectOpenHashMap<>();
+    private final BakedModel defaultModel;
+    private final boolean isVanillaAdapter;
 
     public MultiPartBakedModel(List<Pair<Predicate<BlockState>, BakedModel>> p_119462_) {
         this.selectors = p_119462_;
         BakedModel bakedmodel = p_119462_.iterator().next().getRight();
+        this.defaultModel = bakedmodel;
         this.hasAmbientOcclusion = bakedmodel.useAmbientOcclusion();
         this.isGui3d = bakedmodel.isGui3d();
         this.usesBlockLight = bakedmodel.usesBlockLight();
         this.particleIcon = bakedmodel.getParticleIcon();
         this.transforms = bakedmodel.getTransforms();
         this.overrides = bakedmodel.getOverrides();
+        this.isVanillaAdapter = this.selectors.stream().allMatch(x -> x.getRight().isVanillaAdapter());
     }
 
-    @Override
-    public List<BakedQuad> getQuads(@Nullable BlockState p_235050_, @Nullable Direction p_235051_, RandomSource p_235052_) {
-        if (p_235050_ == null) {
-            return Collections.emptyList();
-        } else {
+    public BitSet getSelectors(@Nullable BlockState p_235050_) {
             BitSet bitset = this.selectorCache.get(p_235050_);
             if (bitset == null) {
                 bitset = new BitSet();
@@ -59,17 +_,28 @@
 
                 this.selectorCache.put(p_235050_, bitset);
             }
+            return bitset;
+    }
 
-            List<BakedQuad> list = Lists.newArrayList();
+    // FORGE: Implement our overloads (here and below) so child models can have custom logic
+    @Override
+    public List<BakedQuad> getQuads(@Nullable BlockState p_235050_, @Nullable Direction p_235051_, RandomSource p_235052_, net.neoforged.neoforge.client.model.data.ModelData modelData, @org.jetbrains.annotations.Nullable net.minecraft.client.renderer.RenderType renderType) {
+        if (p_235050_ == null) {
+            return Collections.emptyList();
+        } else {
+            BitSet bitset = getSelectors(p_235050_);
+            List<List<BakedQuad>> list = Lists.newArrayList();
             long k = p_235052_.nextLong();
 
             for(int j = 0; j < bitset.length(); ++j) {
                 if (bitset.get(j)) {
-                    list.addAll(this.selectors.get(j).getRight().getQuads(p_235050_, p_235051_, RandomSource.create(k)));
+                    var model = this.selectors.get(j).getRight();
+                    if (renderType == null || model.getRenderTypes(p_235050_, p_235052_, modelData).contains(renderType)) // FORGE: Only put quad data if the model is using the render type passed
+                    list.add(model.getQuads(p_235050_, p_235051_, RandomSource.create(k), net.neoforged.neoforge.client.model.data.MultipartModelData.resolve(modelData, model), renderType));
                 }
             }
 
-            return list;
+            return net.neoforged.neoforge.common.util.ConcatenatedListView.of(list);
         }
     }
 
@@ -79,6 +_,21 @@
     }
 
     @Override
+    public boolean useAmbientOcclusion(BlockState state) {
+        return this.defaultModel.useAmbientOcclusion(state);
+    }
+
+    @Override
+    public boolean useAmbientOcclusion(BlockState state, net.minecraft.client.renderer.RenderType renderType) {
+        return this.defaultModel.useAmbientOcclusion(state, renderType);
+    }
+
+    @Override
+    public net.neoforged.neoforge.client.model.data.ModelData getModelData(net.minecraft.world.level.BlockAndTintGetter level, net.minecraft.core.BlockPos pos, BlockState state, net.neoforged.neoforge.client.model.data.ModelData modelData) {
+        return net.neoforged.neoforge.client.model.data.MultipartModelData.create(selectors, getSelectors(state), level, pos, state, modelData);
+    }
+
+    @Override
     public boolean isGui3d() {
         return this.isGui3d;
     }
@@ -94,18 +_,78 @@
     }
 
     @Override
+    @Deprecated
     public TextureAtlasSprite getParticleIcon() {
         return this.particleIcon;
     }
 
     @Override
+    public TextureAtlasSprite getParticleIcon(net.neoforged.neoforge.client.model.data.ModelData modelData) {
+        return this.defaultModel.getParticleIcon(modelData);
+    }
+
+    @Deprecated
+    @Override
     public ItemTransforms getTransforms() {
         return this.transforms;
     }
 
     @Override
+    public BakedModel applyTransform(net.minecraft.world.item.ItemDisplayContext transformType, com.mojang.blaze3d.vertex.PoseStack poseStack, boolean applyLeftHandTransform) {
+        return this.defaultModel.applyTransform(transformType, poseStack, applyLeftHandTransform);
+    }
+
+    @Override // FORGE: Get render types based on the selectors matched by the given block state
+    public net.neoforged.neoforge.client.ChunkRenderTypeSet getRenderTypes(@org.jetbrains.annotations.NotNull BlockState state, @org.jetbrains.annotations.NotNull RandomSource rand, @org.jetbrains.annotations.NotNull net.neoforged.neoforge.client.model.data.ModelData data) {
+        var renderTypeSets = new java.util.LinkedList<net.neoforged.neoforge.client.ChunkRenderTypeSet>();
+        var selectors = getSelectors(state);
+        for (int i = 0; i < selectors.length(); i++)
+            if (selectors.get(i))
+                renderTypeSets.add(this.selectors.get(i).getRight().getRenderTypes(state, rand, data));
+        return net.neoforged.neoforge.client.ChunkRenderTypeSet.union(renderTypeSets);
+    }
+
+    @Override
     public ItemOverrides getOverrides() {
         return this.overrides;
+    }
+
+    @Override
+    public boolean isVanillaAdapter() {
+        return isVanillaAdapter;
+    }
+
+    @Override
+    public void emitBlockQuads(net.minecraft.world.level.BlockAndTintGetter blockView, BlockState state, net.minecraft.core.BlockPos pos, java.util.function.Supplier<RandomSource> randomSupplier, net.neoforged.neoforge.client.renderer.render.RenderContext context) {
+        BitSet bitSet = this.selectorCache.get(state);
+
+        if (bitSet == null) {
+            bitSet = new BitSet();
+
+            for (int i = 0; i < this.selectors.size(); i++) {
+                Pair<Predicate<BlockState>, BakedModel> pair = selectors.get(i);
+
+                if (pair.getLeft().test(state)) {
+                    bitSet.set(i);
+                }
+            }
+
+            selectorCache.put(state, bitSet);
+        }
+
+        RandomSource random = randomSupplier.get();
+        // Imitate vanilla passing a new random to the submodels
+        long randomSeed = random.nextLong();
+        java.util.function.Supplier<RandomSource> subModelRandomSupplier = () -> {
+            random.setSeed(randomSeed);
+            return random;
+        };
+
+        for (int i = 0; i < this.selectors.size(); i++) {
+            if (bitSet.get(i)) {
+                selectors.get(i).getRight().emitBlockQuads(blockView, state, pos, subModelRandomSupplier, context);
+            }
+        }
     }
 
     @OnlyIn(Dist.CLIENT)
