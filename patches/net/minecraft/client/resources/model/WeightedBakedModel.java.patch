--- a/net/minecraft/client/resources/model/WeightedBakedModel.java
+++ b/net/minecraft/client/resources/model/WeightedBakedModel.java
@@ -17,21 +_,24 @@
 import net.neoforged.api.distmarker.OnlyIn;
 
 @OnlyIn(Dist.CLIENT)
-public class WeightedBakedModel implements BakedModel {
+public class WeightedBakedModel implements net.neoforged.neoforge.client.model.IDynamicBakedModel {
     private final int totalWeight;
     private final List<WeightedEntry.Wrapper<BakedModel>> list;
     private final BakedModel wrapped;
+    private final boolean isVanillaAdapter;
 
     public WeightedBakedModel(List<WeightedEntry.Wrapper<BakedModel>> p_119544_) {
         this.list = p_119544_;
         this.totalWeight = WeightedRandom.getTotalWeight(p_119544_);
         this.wrapped = p_119544_.get(0).getData();
+        this.isVanillaAdapter = this.list.stream().allMatch(x -> x.getData().isVanillaAdapter());
     }
 
     @Override
-    public List<BakedQuad> getQuads(@Nullable BlockState p_235058_, @Nullable Direction p_235059_, RandomSource p_235060_) {
+    // FORGE: Implement our overloads (here and below) so child models can have custom logic
+    public List<BakedQuad> getQuads(@Nullable BlockState p_235058_, @Nullable Direction p_235059_, RandomSource p_235060_, net.neoforged.neoforge.client.model.data.ModelData modelData, @org.jetbrains.annotations.Nullable net.minecraft.client.renderer.RenderType renderType) {
         return WeightedRandom.getWeightedItem(this.list, Math.abs((int)p_235060_.nextLong()) % this.totalWeight)
-            .map(p_235065_ -> p_235065_.getData().getQuads(p_235058_, p_235059_, p_235060_))
+            .map(p_235065_ -> p_235065_.getData().getQuads(p_235058_, p_235059_, p_235060_, modelData, renderType))
             .orElse(Collections.emptyList());
     }
 
@@ -41,6 +_,16 @@
     }
 
     @Override
+    public boolean useAmbientOcclusion(BlockState state) {
+        return this.wrapped.useAmbientOcclusion(state);
+    }
+
+    @Override
+    public boolean useAmbientOcclusion(BlockState state, net.minecraft.client.renderer.RenderType renderType) {
+        return this.wrapped.useAmbientOcclusion(state, renderType);
+    }
+
+    @Override
     public boolean isGui3d() {
         return this.wrapped.isGui3d();
     }
@@ -61,13 +_,61 @@
     }
 
     @Override
+    public TextureAtlasSprite getParticleIcon(net.neoforged.neoforge.client.model.data.ModelData modelData) {
+        return this.wrapped.getParticleIcon(modelData);
+    }
+
+    @Override
     public ItemTransforms getTransforms() {
         return this.wrapped.getTransforms();
     }
 
     @Override
+    public BakedModel applyTransform(net.minecraft.world.item.ItemDisplayContext transformType, com.mojang.blaze3d.vertex.PoseStack poseStack, boolean applyLeftHandTransform) {
+        return this.wrapped.applyTransform(transformType, poseStack, applyLeftHandTransform);
+    }
+
+    @Override // FORGE: Get render types based on the active weighted model
+    public net.neoforged.neoforge.client.ChunkRenderTypeSet getRenderTypes(@org.jetbrains.annotations.NotNull BlockState state, @org.jetbrains.annotations.NotNull RandomSource rand, @org.jetbrains.annotations.NotNull net.neoforged.neoforge.client.model.data.ModelData data) {
+        return WeightedRandom.getWeightedItem(this.list, Math.abs((int)rand.nextLong()) % this.totalWeight)
+                  .map((p_235065_) -> p_235065_.getData().getRenderTypes(state, rand, data))
+                  .orElse(net.neoforged.neoforge.client.ChunkRenderTypeSet.none());
+    }
+
+    @Override
     public ItemOverrides getOverrides() {
         return this.wrapped.getOverrides();
+    }
+
+    @Override
+    public boolean isVanillaAdapter() {
+        return isVanillaAdapter;
+    }
+
+    @Override
+    public void emitBlockQuads(net.minecraft.world.level.BlockAndTintGetter blockView, BlockState state, net.minecraft.core.BlockPos pos, java.util.function.Supplier<RandomSource> randomSupplier, net.neoforged.neoforge.client.renderer.render.RenderContext context) {
+        var selected = WeightedRandom.getWeightedItem(this.list, Math.abs((int) randomSupplier.get().nextLong()) % this.totalWeight).orElse(null);
+
+        if (selected != null) {
+            selected.getData().emitBlockQuads(blockView, state, pos, () -> {
+                RandomSource random = randomSupplier.get();
+                random.nextLong(); // Imitate vanilla modifying the random before passing it to the submodel
+                return random;
+            }, context);
+        }
+    }
+
+    @Override
+    public void emitItemQuads(net.minecraft.world.item.ItemStack stack, java.util.function.Supplier<RandomSource> randomSupplier, net.neoforged.neoforge.client.renderer.render.RenderContext context) {
+        var selected = WeightedRandom.getWeightedItem(this.list, Math.abs((int) randomSupplier.get().nextLong()) % this.totalWeight).orElse(null);
+
+        if (selected != null) {
+            selected.getData().emitItemQuads(stack, () -> {
+                RandomSource random = randomSupplier.get();
+                random.nextLong(); // Imitate vanilla modifying the random before passing it to the submodel
+                return random;
+            }, context);
+        }
     }
 
     @OnlyIn(Dist.CLIENT)
